/* NJA 0.86alpha1 NinjaAsciiDataMix CnkModel (NJA) */

/* ROOT OBJECT : object__sphere3_sphere3 n(1) d(1) */


CNKOBJECT_START

PLIST      strip__sphere3_sphere3[]
START
	CnkM_DAS( FBS_SA|FBD_ISA ), 6,
	MDiff( 191, 191, 191, 191 ),
	MAmbi( 0, 0, 0, 0 ),
	MSpec( 5, 255, 255, 255 ),
	CnkS( 0x0 ), 908, _NB( UFO_0, 49 ),
	StripL(4),  40, 21, 0, 2, 
	StripL(4),  96, 1, 77, 58, 
	StripL(5),  97, 78, 0, 59, 40, 
	StripR(5),  153, 134, 1, 115, 96, 
	StripL(5),  154, 135, 0, 116, 97, 
	StripR(5),  210, 191, 1, 172, 153, 
	StripL(5),  211, 192, 0, 173, 154, 
	StripR(5),  267, 248, 1, 229, 210, 
	StripL(5),  268, 249, 0, 230, 211, 
	StripR(5),  324, 305, 1, 286, 267, 
	StripL(5),  325, 306, 0, 287, 268, 
	StripR(5),  381, 362, 1, 343, 324, 
	StripL(5),  381, 20, 1, 39, 58, 
	StripL(5),  55, 37, 36, 18, 17, 
	StripL(7),  73, 55, 54, 36, 35, 17, 16, 
	StripL(3),  74, 75, 56, 
	StripL(9),  91, 73, 72, 54, 53, 35, 34, 16, 15, 
	StripL(5),  94, 75, 93, 74, 92, 
	StripL(11),  109, 91, 90, 72, 71, 53, 52, 34, 33, 15, 
                   14, 
	StripL(7),  113, 94, 112, 93, 111, 92, 110, 
	StripL(13),  127, 109, 108, 90, 89, 71, 70, 52, 51, 33, 
                   32, 14, 13, 
	StripL(9),  132, 113, 131, 112, 130, 111, 129, 110, 128, 
	StripL(15),  145, 127, 126, 108, 107, 89, 88, 70, 69, 51, 
                   50, 32, 31, 13, 12, 
	StripL(11),  151, 132, 150, 131, 149, 130, 148, 129, 147, 128, 
                   146, 
	StripL(17),  163, 145, 144, 126, 125, 107, 106, 88, 87, 69, 
                   68, 50, 49, 31, 30, 12, 11, 
	StripL(13),  170, 151, 169, 150, 168, 149, 167, 148, 166, 147, 
                   165, 146, 164, 
	StripL(19),  181, 163, 162, 144, 143, 125, 124, 106, 105, 87, 
                   86, 68, 67, 49, 48, 30, 29, 11, 10, 
	StripL(15),  189, 170, 188, 169, 187, 168, 186, 167, 185, 166, 
                   184, 165, 183, 164, 182, 
	StripL(21),  199, 181, 180, 162, 161, 143, 142, 124, 123, 105, 
                   104, 86, 85, 67, 66, 48, 47, 29, 28, 10, 
                   9, 
	StripL(17),  208, 189, 207, 188, 206, 187, 205, 186, 204, 185, 
                   203, 184, 202, 183, 201, 182, 200, 
	StripL(42),  208, 190, 189, 171, 170, 152, 151, 133, 132, 114, 
                   113, 95, 94, 76, 75, 57, 56, 38, 37, 19, 
                   18, 380, 379, 361, 360, 342, 341, 323, 322, 304, 
                   303, 285, 284, 266, 265, 247, 246, 228, 227, 209, 
                   208, 190, 
	StripL(42),  209, 191, 190, 172, 171, 153, 152, 134, 133, 115, 
                   114, 96, 95, 77, 76, 58, 57, 39, 38, 20, 
                   19, 381, 380, 362, 361, 343, 342, 324, 323, 305, 
                   304, 286, 285, 267, 266, 248, 247, 229, 228, 210, 
                   209, 191, 
	StripL(23),  217, 199, 198, 180, 179, 161, 160, 142, 141, 123, 
                   122, 104, 103, 85, 84, 66, 65, 47, 46, 28, 
                   27, 9, 8, 
	StripL(19),  227, 208, 226, 207, 225, 206, 224, 205, 223, 204, 
                   222, 203, 221, 202, 220, 201, 219, 200, 218, 
	StripL(25),  235, 217, 216, 198, 197, 179, 178, 160, 159, 141, 
                   140, 122, 121, 103, 102, 84, 83, 65, 64, 46, 
                   45, 27, 26, 8, 7, 
	StripL(21),  246, 227, 245, 226, 244, 225, 243, 224, 242, 223, 
                   241, 222, 240, 221, 239, 220, 238, 219, 237, 218, 
                   236, 
	StripL(27),  253, 235, 234, 216, 215, 197, 196, 178, 177, 159, 
                   158, 140, 139, 121, 120, 102, 101, 83, 82, 64, 
                   63, 45, 44, 26, 25, 7, 6, 
	StripL(23),  265, 246, 264, 245, 263, 244, 262, 243, 261, 242, 
                   260, 241, 259, 240, 258, 239, 257, 238, 256, 237, 
                   255, 236, 254, 
	StripL(29),  271, 253, 252, 234, 233, 215, 214, 196, 195, 177, 
                   176, 158, 157, 139, 138, 120, 119, 101, 100, 82, 
                   81, 63, 62, 44, 43, 25, 24, 6, 5, 
	StripL(25),  284, 265, 283, 264, 282, 263, 281, 262, 280, 261, 
                   279, 260, 278, 259, 277, 258, 276, 257, 275, 256, 
                   274, 255, 273, 254, 272, 
	StripL(31),  289, 271, 270, 252, 251, 233, 232, 214, 213, 195, 
                   194, 176, 175, 157, 156, 138, 137, 119, 118, 100, 
                   99, 81, 80, 62, 61, 43, 42, 24, 23, 5, 
                   4, 
	StripL(27),  303, 284, 302, 283, 301, 282, 300, 281, 299, 280, 
                   298, 279, 297, 278, 296, 277, 295, 276, 294, 275, 
                   293, 274, 292, 273, 291, 272, 290, 
	StripL(33),  307, 289, 288, 270, 269, 251, 250, 232, 231, 213, 
                   212, 194, 193, 175, 174, 156, 155, 137, 136, 118, 
                   117, 99, 98, 80, 79, 61, 60, 42, 41, 23, 
                   22, 4, 3, 
	StripL(29),  322, 303, 321, 302, 320, 301, 319, 300, 318, 299, 
                   317, 298, 316, 297, 315, 296, 314, 295, 313, 294, 
                   312, 293, 311, 292, 310, 291, 309, 290, 308, 
	StripL(35),  325, 307, 306, 288, 287, 269, 268, 250, 249, 231, 
                   230, 212, 211, 193, 192, 174, 173, 155, 154, 136, 
                   135, 117, 116, 98, 97, 79, 78, 60, 59, 41, 
                   40, 22, 21, 3, 2, 
	StripL(31),  341, 322, 340, 321, 339, 320, 338, 319, 337, 318, 
                   336, 317, 335, 316, 334, 315, 333, 314, 332, 313, 
                   331, 312, 330, 311, 329, 310, 328, 309, 327, 308, 
                   326, 
	StripL(33),  360, 341, 359, 340, 358, 339, 357, 338, 356, 337, 
                   355, 336, 354, 335, 353, 334, 352, 333, 351, 332, 
                   350, 331, 349, 330, 348, 329, 347, 328, 346, 327, 
                   345, 326, 344, 
	StripL(34),  379, 360, 378, 359, 377, 358, 376, 357, 375, 356, 
                   374, 355, 373, 354, 372, 353, 371, 352, 370, 351, 
                   369, 350, 368, 349, 367, 348, 366, 347, 365, 346, 
                   364, 345, 363, 344, 
	StripL(69),  18, 379, 17, 378, 16, 377, 15, 376, 14, 375, 
                   13, 374, 12, 373, 11, 372, 10, 371, 9, 370, 
                   8, 369, 7, 368, 6, 367, 5, 366, 4, 365, 
                   3, 364, 2, 363, 0, 344, 325, 326, 307, 308, 
                   289, 290, 271, 272, 253, 254, 235, 236, 217, 218, 
                   199, 200, 181, 182, 163, 164, 145, 146, 127, 128, 
                   109, 110, 91, 92, 73, 74, 55, 56, 37, 
	CnkEnd()
END

VLIST      vertex__sphere3_sphere3[]
START
	CnkV_VN(0, 2293),
	OffnbIdx(0, 382),
	VERT( 0x00000000, 0xc1700000, 0x00000000 ),
	NORM( 0x00000000, 0xbf800000, 0x00000000 ),
	VERT( 0x00000000, 0x41700000, 0x00000000 ),
	NORM( 0x00000000, 0x3f800000, 0x00000000 ),
	VERT( 0x40162d56, 0xc16d0b92, 0x00000000 ),
	NORM( 0x3e202a35, 0xbf7cd962, 0x00000000 ),
	VERT( 0x40945402, 0xc16440ea, 0x00000000 ),
	NORM( 0x3e9e31d7, 0xbf737964, 0x00000000 ),
	VERT( 0x40d9ea5b, 0xc155d771, 0x00000000 ),
	NORM( 0x3ee86a2b, 0xbf641adf, 0x00000000 ),
	VERT( 0x410d1187, 0xc1422a01, 0x00000000 ),
	NORM( 0x3f167547, 0xbf4f1e8e, 0x00000000 ),
	VERT( 0x4129b4a4, 0xc129b4a4, 0x00000000 ),
	NORM( 0x3f35016d, 0xbf350881, 0x00000000 ),
	VERT( 0x41422a01, 0xc10d1186, 0x00000000 ),
	NORM( 0x3f4f18ec, 0xbf167cf2, 0x00000000 ),
	VERT( 0x4155d771, 0xc0d9ea5b, 0x00000000 ),
	NORM( 0x3f641733, 0xbee87896, 0xb58637bd ),
	VERT( 0x416440ea, 0xc0945400, 0x00000000 ),
	NORM( 0x3f73778e, 0xbe9e3cfb, 0xb58637bd ),
	VERT( 0x416d0b93, 0xc0162d4d, 0x00000000 ),
	NORM( 0x3f7cd8ed, 0xbe203644, 0xb58637bd ),
	VERT( 0x41700000, 0x360637bd, 0x00000000 ),
	NORM( 0x3f800000, 0x00000000, 0xb58637bd ),
	VERT( 0x416d0b92, 0x40162d62, 0x00000000 ),
	NORM( 0x3f7cd8ed, 0x3e203687, 0xb58637bd ),
	VERT( 0x416440e8, 0x4094540b, 0x00000000 ),
	NORM( 0x3f73778e, 0x3e9e3d1d, 0xb58637bd ),
	VERT( 0x4155d76e, 0x40d9ea64, 0x00000000 ),
	NORM( 0x3f641722, 0x3ee878b8, 0xb58637bd ),
	VERT( 0x414229fd, 0x410d118c, 0x00000000 ),
	NORM( 0x3f4f18ec, 0x3f167cf2, 0x00000000 ),
	VERT( 0x4129b49f, 0x4129b4a8, 0x00000000 ),
	NORM( 0x3f35016d, 0x3f350881, 0x00000000 ),
	VERT( 0x410d1180, 0x41422a06, 0x00000000 ),
	NORM( 0x3f167536, 0x3f4f1e8e, 0x00000000 ),
	VERT( 0x40d9ea48, 0x4155d775, 0x00000000 ),
	NORM( 0x3ee86a2b, 0x3f641adf, 0x00000000 ),
	VERT( 0x409453ed, 0x416440ed, 0x00000000 ),
	NORM( 0x3e9e31b6, 0x3f737964, 0x00000000 ),
	VERT( 0x40162d28, 0x416d0b94, 0x00000000 ),
	NORM( 0x3e2029f1, 0x3f7cd962, 0x00000000 ),
	VERT( 0x400ed3ae, 0xc16d0b92, 0xbf39a112 ),
	NORM( 0x3e18537e, 0xbf7cd962, 0xbd45f9df ),
	VERT( 0x408d1188, 0xc16440ea, 0xbfb75800 ),
	NORM( 0x3e9673c5, 0xbf737964, 0xbdc389f8 ),
	VERT( 0x40cf3ffb, 0xc155d771, 0xc006adde ),
	NORM( 0x3edd0a24, 0xbf641adf, 0xbe0fa3fd ),
	VERT( 0x41062a02, 0xc1422a01, 0xc02e5ec8 ),
	NORM( 0x3f0f1811, 0xbf4f1e8e, 0xbe39f9cf ),
	VERT( 0x4121664f, 0xc129b4a4, 0xc051c487 ),
	NORM( 0x3f2c257d, 0xbf350881, 0xbe5fbc1b ),
	VERT( 0x4138a938, 0xc10d1186, 0xc0700000 ),
	NORM( 0x3f44f616, 0xbf167cf2, 0xbe7ffc98 ),
	VERT( 0x414b601c, 0xc0d9ea5b, 0xc0842950 ),
	NORM( 0x3f58ed4e, 0xbee87896, 0xbe8cf7cb ),
	VERT( 0x41591501, 0xc0945400, 0xc08d1188 ),
	NORM( 0x3f678cfc, 0xbe9e3cfb, 0xbe96787d ),
	VERT( 0x41617183, 0xc0162d4d, 0xc0928082 ),
	NORM( 0x3f7078d9, 0xbe203644, 0xbe9c449e ),
	VERT( 0x416440ea, 0x360637bd, 0xc0945402 ),
	NORM( 0x3f737879, 0x00000000, 0xbe9e377a ),
	VERT( 0x41617182, 0x40162d62, 0xc0928082 ),
	NORM( 0x3f7078d9, 0x3e203687, 0xbe9c449e ),
	VERT( 0x415914ff, 0x4094540b, 0xc08d1186 ),
	NORM( 0x3f678cfc, 0x3e9e3d1d, 0xbe96787d ),
	VERT( 0x414b6019, 0x40d9ea64, 0xc084294e ),
	NORM( 0x3f58ed4e, 0x3ee87896, 0xbe8cf7a9 ),
	VERT( 0x4138a935, 0x410d118c, 0xc06ffffc ),
	NORM( 0x3f44f616, 0x3f167cf2, 0xbe7ffc98 ),
	VERT( 0x4121664b, 0x4129b4a8, 0xc051c482 ),
	NORM( 0x3f2c257d, 0x3f350881, 0xbe5fbc1b ),
	VERT( 0x410629fb, 0x41422a06, 0xc02e5ec0 ),
	NORM( 0x3f0f1811, 0x3f4f1e8e, 0xbe39f9cf ),
	VERT( 0x40cf3fea, 0x4155d775, 0xc006add1 ),
	NORM( 0x3edd0a03, 0x3f641adf, 0xbe0fa3ba ),
	VERT( 0x408d1175, 0x416440ed, 0xbfb757e6 ),
	NORM( 0x3e9673a3, 0x3f737964, 0xbdc389f8 ),
	VERT( 0x400ed384, 0x416d0b94, 0xbf39a0cf ),
	NORM( 0x3e18533b, 0x3f7cd962, 0xbd45f8d3 ),
	VERT( 0x3ff2fddb, 0xc16d0b92, 0xbfb08b33 ),
	NORM( 0x3e019371, 0xbf7cd962, 0xbdbc48f1 ),
	VERT( 0x40700000, 0xc16440ea, 0xc02e5ec8 ),
	NORM( 0x3e7ff6d3, 0xbf737964, 0xbe39f7f9 ),
	VERT( 0x40b04c1d, 0xc155d771, 0xc0801666 ),
	NORM( 0x3ebc0703, 0xbf641adf, 0xbe889c1b ),
	VERT( 0x40e440ec, 0xc1422a01, 0xc0a5d600 ),
	NORM( 0x3ef3723f, 0xbf4f1e8e, 0xbeb0dfbd ),
	VERT( 0x41094b74, 0xc129b4a4, 0xc0c7803f ),
	NORM( 0x3f126fc6, 0xbf350881, 0xbed4c8de ),
	VERT( 0x411d1501, 0xc10d1186, 0xc0e440ea ),
	NORM( 0x3f278b9c, 0xbf167cf2, 0xbef37521 ),
	VERT( 0x412d0060, 0xc0d9ea5b, 0xc0fb62c7 ),
	NORM( 0x3f388777, 0xbee87896, 0xbf061177 ),
	VERT( 0x4138a939, 0xc0945400, 0xc1062a02 ),
	NORM( 0x3f44f80e, 0xbe9e3cfb, 0xbf0f1b37 ),
	VERT( 0x413fc60c, 0xc0162d4d, 0xc10b54ea ),
	NORM( 0x3f4c8ece, 0xbe203644, 0xbf149eaa ),
	VERT( 0x41422a02, 0x360637bd, 0xc10d1187 ),
	NORM( 0x3f4f1bbd, 0x00000000, 0xbf167914 ),
	VERT( 0x413fc60b, 0x40162d62, 0xc10b54e9 ),
	NORM( 0x3f4c8ece, 0x3e203687, 0xbf149eaa ),
	VERT( 0x4138a937, 0x4094540b, 0xc1062a00 ),
	NORM( 0x3f44f80e, 0x3e9e3d1d, 0xbf0f1b37 ),
	VERT( 0x412d005f, 0x40d9ea64, 0xc0fb62c3 ),
	NORM( 0x3f388777, 0x3ee87896, 0xbf061177 ),
	VERT( 0x411d14fe, 0x410d118c, 0xc0e440e6 ),
	NORM( 0x3f278b9c, 0x3f167cf2, 0xbef37521 ),
	VERT( 0x41094b70, 0x4129b4a8, 0xc0c78039 ),
	NORM( 0x3f126fb5, 0x3f350881, 0xbed4c8de ),
	VERT( 0x40e440df, 0x41422a06, 0xc0a5d5f8 ),
	NORM( 0x3ef3721d, 0x3f4f1e8e, 0xbeb0dfbd ),
	VERT( 0x40b04c0e, 0x4155d775, 0xc080165b ),
	NORM( 0x3ebc0703, 0x3f641adf, 0xbe889c1b ),
	VERT( 0x406fffe3, 0x416440ed, 0xc02e5eaf ),
	NORM( 0x3e7ff6d3, 0x3f737964, 0xbe39f7f9 ),
	VERT( 0x3ff2fd8f, 0x416d0b94, 0xbfb08b00 ),
	NORM( 0x3e019371, 0x3f7cd962, 0xbdbc48f1 ),
	VERT( 0x3fb08b33, 0xc16d0b92, 0xbff2fddb ),
	NORM( 0x3dbc48f1, 0xbf7cd962, 0xbe019371 ),
	VERT( 0x402e5ec8, 0xc16440ea, 0xc0700000 ),
	NORM( 0x3e39f7f9, 0xbf737964, 0xbe7ff6d3 ),
	VERT( 0x40801666, 0xc155d771, 0xc0b04c1d ),
	NORM( 0x3e889c1b, 0xbf641adf, 0xbebc0703 ),
	VERT( 0x40a5d602, 0xc1422a01, 0xc0e440ec ),
	NORM( 0x3eb0dfbd, 0xbf4f1e8e, 0xbef3723f ),
	VERT( 0x40c7803d, 0xc129b4a4, 0xc1094b74 ),
	NORM( 0x3ed4c8de, 0xbf350881, 0xbf126fc6 ),
	VERT( 0x40e440ea, 0xc10d1186, 0xc11d1501 ),
	NORM( 0x3ef37521, 0xbf167cf2, 0xbf278b9c ),
	VERT( 0x40fb62c7, 0xc0d9ea5b, 0xc12d0062 ),
	NORM( 0x3f061177, 0xbee87896, 0xbf388777 ),
	VERT( 0x41062a02, 0xc0945400, 0xc138a93a ),
	NORM( 0x3f0f1b37, 0xbe9e3cfb, 0xbf44f80e ),
	VERT( 0x410b54ea, 0xc0162d4d, 0xc13fc60c ),
	NORM( 0x3f149eba, 0xbe203644, 0xbf4c8ece ),
	VERT( 0x410d1187, 0x360637bd, 0xc1422a02 ),
	NORM( 0x3f167914, 0x00000000, 0xbf4f1bbd ),
	VERT( 0x410b54e9, 0x40162d62, 0xc13fc60b ),
	NORM( 0x3f149eaa, 0x3e203687, 0xbf4c8ece ),
	VERT( 0x41062a00, 0x4094540b, 0xc138a937 ),
	NORM( 0x3f0f1b37, 0x3e9e3d1d, 0xbf44f80e ),
	VERT( 0x40fb62c5, 0x40d9ea64, 0xc12d005e ),
	NORM( 0x3f061177, 0x3ee87896, 0xbf388777 ),
	VERT( 0x40e440e6, 0x410d118c, 0xc11d14fe ),
	NORM( 0x3ef37521, 0x3f167cf2, 0xbf278b9c ),
	VERT( 0x40c78037, 0x4129b4a8, 0xc1094b70 ),
	NORM( 0x3ed4c8de, 0x3f350881, 0xbf126fc6 ),
	VERT( 0x40a5d5f8, 0x41422a06, 0xc0e440df ),
	NORM( 0x3eb0dfbd, 0x3f4f1e8e, 0xbef3721d ),
	VERT( 0x4080165b, 0x4155d775, 0xc0b04c0e ),
	NORM( 0x3e889c1b, 0x3f641adf, 0xbebc0703 ),
	VERT( 0x402e5eaf, 0x416440ed, 0xc06fffe3 ),
	NORM( 0x3e39f7f9, 0x3f737964, 0xbe7ff6d3 ),
	VERT( 0x3fb08b00, 0x416d0b94, 0xbff2fd8f ),
	NORM( 0x3dbc48f1, 0x3f7cd962, 0xbe019371 ),
	VERT( 0x3f39a112, 0xc16d0b92, 0xc00ed3ae ),
	NORM( 0x3d45f9df, 0xbf7cd962, 0xbe18537e ),
	VERT( 0x3fb75800, 0xc16440ea, 0xc08d1188 ),
	NORM( 0x3dc389f8, 0xbf737964, 0xbe9673c5 ),
	VERT( 0x4006adde, 0xc155d771, 0xc0cf3ffd ),
	NORM( 0x3e0fa3fd, 0xbf641adf, 0xbedd0a24 ),
	VERT( 0x402e5ec8, 0xc1422a01, 0xc1062a03 ),
	NORM( 0x3e39fa12, 0xbf4f1e8e, 0xbf0f1811 ),
	VERT( 0x4051c487, 0xc129b4a4, 0xc121664f ),
	NORM( 0x3e5fbc1b, 0xbf350881, 0xbf2c257d ),
	VERT( 0x40700000, 0xc10d1186, 0xc138a939 ),
	NORM( 0x3e7ffc98, 0xbf167cf2, 0xbf44f616 ),
	VERT( 0x40842950, 0xc0d9ea5b, 0xc14b601d ),
	NORM( 0x3e8cf7cb, 0xbee87896, 0xbf58ed4e ),
	VERT( 0x408d1188, 0xc0945400, 0xc1591503 ),
	NORM( 0x3e96787d, 0xbe9e3cfb, 0xbf678cfc ),
	VERT( 0x40928084, 0xc0162d4d, 0xc1617184 ),
	NORM( 0x3e9c449e, 0xbe203644, 0xbf7078d9 ),
	VERT( 0x40945402, 0x360637bd, 0xc16440eb ),
	NORM( 0x3e9e377a, 0x00000000, 0xbf737868 ),
	VERT( 0x40928082, 0x40162d62, 0xc1617183 ),
	NORM( 0x3e9c449e, 0x3e203687, 0xbf7078d9 ),
	VERT( 0x408d1186, 0x4094540b, 0xc1591500 ),
	NORM( 0x3e96787d, 0x3e9e3d1d, 0xbf678cfc ),
	VERT( 0x40842950, 0x40d9ea64, 0xc14b601a ),
	NORM( 0x3e8cf7cb, 0x3ee87896, 0xbf58ed4e ),
	VERT( 0x406ffffc, 0x410d118c, 0xc138a935 ),
	NORM( 0x3e7ffc98, 0x3f167cf2, 0xbf44f616 ),
	VERT( 0x4051c47e, 0x4129b4a8, 0xc121664a ),
	NORM( 0x3e5fbc1b, 0x3f350881, 0xbf2c257d ),
	VERT( 0x402e5ec0, 0x41422a06, 0xc10629fc ),
	NORM( 0x3e39f9cf, 0x3f4f1e8e, 0xbf0f1811 ),
	VERT( 0x4006add6, 0x4155d775, 0xc0cf3fea ),
	NORM( 0x3e0fa3fd, 0x3f641adf, 0xbedd0a03 ),
	VERT( 0x3fb757e6, 0x416440ed, 0xc08d1175 ),
	NORM( 0x3dc389f8, 0x3f737964, 0xbe9673a3 ),
	VERT( 0x3f39a0cf, 0x416d0b94, 0xc00ed384 ),
	NORM( 0x3d45f8d3, 0x3f7cd962, 0xbe18533b ),
	VERT( 0x00000000, 0xc16d0b92, 0xc0162d56 ),
	NORM( 0x00000000, 0xbf7cd962, 0xbe202a35 ),
	VERT( 0x00000000, 0xc16440ea, 0xc0945404 ),
	NORM( 0x00000000, 0xbf737964, 0xbe9e31d7 ),
	VERT( 0x00000000, 0xc155d771, 0xc0d9ea5d ),
	NORM( 0x00000000, 0xbf641adf, 0xbee86a2b ),
	VERT( 0x00000000, 0xc1422a01, 0xc10d1189 ),
	NORM( 0x00000000, 0xbf4f1e8e, 0xbf167547 ),
	VERT( 0x00000000, 0xc129b4a4, 0xc129b4a4 ),
	NORM( 0x00000000, 0xbf350881, 0xbf35016d ),
	VERT( 0x00000000, 0xc10d1186, 0xc1422a02 ),
	NORM( 0x00000000, 0xbf167cf2, 0xbf4f18ec ),
	VERT( 0x00000000, 0xc0d9ea5b, 0xc155d773 ),
	NORM( 0x00000000, 0xbee87896, 0xbf641733 ),
	VERT( 0x00000000, 0xc0945400, 0xc16440ed ),
	NORM( 0x00000000, 0xbe9e3cfb, 0xbf73778e ),
	VERT( 0x00000000, 0xc0162d4d, 0xc16d0b95 ),
	NORM( 0x00000000, 0xbe203644, 0xbf7cd8ed ),
	VERT( 0x00000000, 0x360637bd, 0xc1700002 ),
	NORM( 0x00000000, 0x00000000, 0xbf800000 ),
	VERT( 0xb58637bd, 0x40162d62, 0xc16d0b94 ),
	NORM( 0x00000000, 0x3e203687, 0xbf7cd8ed ),
	VERT( 0x00000000, 0x4094540b, 0xc16440ea ),
	NORM( 0x00000000, 0x3e9e3d1d, 0xbf73778e ),
	VERT( 0x358637bd, 0x40d9ea64, 0xc155d770 ),
	NORM( 0x00000000, 0x3ee878b8, 0xbf641722 ),
	VERT( 0x00000000, 0x410d118c, 0xc14229fe ),
	NORM( 0x00000000, 0x3f167cf2, 0xbf4f18ec ),
	VERT( 0x00000000, 0x4129b4a8, 0xc129b49e ),
	NORM( 0x00000000, 0x3f350881, 0xbf35016d ),
	VERT( 0x00000000, 0x41422a06, 0xc10d1181 ),
	NORM( 0x00000000, 0x3f4f1e8e, 0xbf167536 ),
	VERT( 0x00000000, 0x4155d775, 0xc0d9ea4b ),
	NORM( 0x00000000, 0x3f641adf, 0xbee86a2b ),
	VERT( 0x00000000, 0x416440ed, 0xc09453ef ),
	NORM( 0x00000000, 0x3f737964, 0xbe9e31b6 ),
	VERT( 0x00000000, 0x416d0b94, 0xc0162d28 ),
	NORM( 0x00000000, 0x3f7cd962, 0xbe2029f1 ),
	VERT( 0xbf39a112, 0xc16d0b92, 0xc00ed3ae ),
	NORM( 0xbd45f9df, 0xbf7cd962, 0xbe18533b ),
	VERT( 0xbfb75800, 0xc16440ea, 0xc08d118a ),
	NORM( 0xbdc389f8, 0xbf737964, 0xbe9673c5 ),
	VERT( 0xc006adde, 0xc155d771, 0xc0cf3ffd ),
	NORM( 0xbe0fa3fd, 0xbf641adf, 0xbedd0a24 ),
	VERT( 0xc02e5ec8, 0xc1422a01, 0xc1062a04 ),
	NORM( 0xbe39f9cf, 0xbf4f1e8e, 0xbf0f1811 ),
	VERT( 0xc051c487, 0xc129b4a4, 0xc121664f ),
	NORM( 0xbe5fbc1b, 0xbf350881, 0xbf2c257d ),
	VERT( 0xc0700004, 0xc10d1186, 0xc138a939 ),
	NORM( 0xbe7ffc98, 0xbf167cf2, 0xbf44f616 ),
	VERT( 0xc0842950, 0xc0d9ea5b, 0xc14b601e ),
	NORM( 0xbe8cf7a9, 0xbee87896, 0xbf58ed4e ),
	VERT( 0xc08d118a, 0xc0945400, 0xc1591504 ),
	NORM( 0xbe96787d, 0xbe9e3cfb, 0xbf678cfc ),
	VERT( 0xc0928084, 0xc0162d4d, 0xc1617184 ),
	NORM( 0xbe9c449e, 0xbe203644, 0xbf7078d9 ),
	VERT( 0xc0945404, 0x360637bd, 0xc16440ec ),
	NORM( 0xbe9e377a, 0x00000000, 0xbf737868 ),
	VERT( 0xc0928086, 0x40162d62, 0xc1617184 ),
	NORM( 0xbe9c449e, 0x3e203687, 0xbf7078d9 ),
	VERT( 0xc08d1188, 0x4094540b, 0xc1591501 ),
	NORM( 0xbe96787d, 0x3e9e3d1d, 0xbf678cfc ),
	VERT( 0xc084294c, 0x40d9ea64, 0xc14b601b ),
	NORM( 0xbe8cf7a9, 0x3ee878b8, 0xbf58ed4e ),
	VERT( 0xc06ffffc, 0x410d118c, 0xc138a935 ),
	NORM( 0xbe7ffc98, 0x3f167cf2, 0xbf44f616 ),
	VERT( 0xc051c482, 0x4129b4a8, 0xc121664a ),
	NORM( 0xbe5fbc1b, 0x3f350881, 0xbf2c257d ),
	VERT( 0xc02e5ec0, 0x41422a06, 0xc10629fc ),
	NORM( 0xbe39f9cf, 0x3f4f1e8e, 0xbf0f1811 ),
	VERT( 0xc006add1, 0x4155d775, 0xc0cf3fea ),
	NORM( 0xbe0fa3ba, 0x3f641adf, 0xbedd0a03 ),
	VERT( 0xbfb757de, 0x416440ed, 0xc08d1175 ),
	NORM( 0xbdc389f8, 0x3f737964, 0xbe9673a3 ),
	VERT( 0xbf39a0cf, 0x416d0b94, 0xc00ed384 ),
	NORM( 0xbd45f8d3, 0x3f7cd962, 0xbe18533b ),
	VERT( 0xbfb08b33, 0xc16d0b92, 0xbff2fddb ),
	NORM( 0xbdbc48f1, 0xbf7cd962, 0xbe019371 ),
	VERT( 0xc02e5ec8, 0xc16440ea, 0xc0700004 ),
	NORM( 0xbe39f7f9, 0xbf737964, 0xbe7ff6d3 ),
	VERT( 0xc0801668, 0xc155d771, 0xc0b04c1f ),
	NORM( 0xbe889c1b, 0xbf641adf, 0xbebc0703 ),
	VERT( 0xc0a5d602, 0xc1422a01, 0xc0e440ee ),
	NORM( 0xbeb0dfbd, 0xbf4f1e8e, 0xbef3723f ),
	VERT( 0xc0c7803d, 0xc129b4a4, 0xc1094b74 ),
	NORM( 0xbed4c8de, 0xbf350881, 0xbf126fc6 ),
	VERT( 0xc0e440ec, 0xc10d1186, 0xc11d1502 ),
	NORM( 0xbef37521, 0xbf167cf2, 0xbf278b9c ),
	VERT( 0xc0fb62ca, 0xc0d9ea5b, 0xc12d0062 ),
	NORM( 0xbf061177, 0xbee87896, 0xbf388777 ),
	VERT( 0xc1062a04, 0xc0945400, 0xc138a93b ),
	NORM( 0xbf0f1b37, 0xbe9e3cfb, 0xbf44f80e ),
	VERT( 0xc10b54ea, 0xc0162d4d, 0xc13fc60d ),
	NORM( 0xbf149eba, 0xbe203644, 0xbf4c8ece ),
	VERT( 0xc10d1188, 0x360637bd, 0xc1422a03 ),
	NORM( 0xbf167914, 0x00000000, 0xbf4f1bbd ),
	VERT( 0xc10b54eb, 0x40162d62, 0xc13fc60c ),
	NORM( 0xbf149eaa, 0x3e203687, 0xbf4c8ece ),
	VERT( 0xc1062a02, 0x4094540b, 0xc138a939 ),
	NORM( 0xbf0f1b37, 0x3e9e3d1d, 0xbf44f80e ),
	VERT( 0xc0fb62c3, 0x40d9ea64, 0xc12d0060 ),
	NORM( 0xbf061177, 0x3ee878b8, 0xbf388777 ),
	VERT( 0xc0e440e6, 0x410d118c, 0xc11d14fe ),
	NORM( 0xbef37521, 0x3f167cf2, 0xbf278b9c ),
	VERT( 0xc0c78037, 0x4129b4a8, 0xc1094b6f ),
	NORM( 0xbed4c8de, 0x3f350881, 0xbf126fc6 ),
	VERT( 0xc0a5d5fa, 0x41422a06, 0xc0e440e1 ),
	NORM( 0xbeb0dfbd, 0x3f4f1e8e, 0xbef3721d ),
	VERT( 0xc080165b, 0x4155d775, 0xc0b04c10 ),
	NORM( 0xbe889c1b, 0x3f641adf, 0xbebc0703 ),
	VERT( 0xc02e5eaf, 0x416440ed, 0xc06fffe3 ),
	NORM( 0xbe39f7f9, 0x3f737964, 0xbe7ff6d3 ),
	VERT( 0xbfb08b00, 0x416d0b94, 0xbff2fd8f ),
	NORM( 0xbdbc48f1, 0x3f7cd962, 0xbe019371 ),
	VERT( 0xbff2fddb, 0xc16d0b92, 0xbfb08b33 ),
	NORM( 0xbe019371, 0xbf7cd962, 0xbdbc48f1 ),
	VERT( 0xc0700004, 0xc16440ea, 0xc02e5ecc ),
	NORM( 0xbe7ff6d3, 0xbf737964, 0xbe39f7f9 ),
	VERT( 0xc0b04c21, 0xc155d771, 0xc0801668 ),
	NORM( 0xbebc0703, 0xbf641adf, 0xbe889c1b ),
	VERT( 0xc0e440ee, 0xc1422a01, 0xc0a5d602 ),
	NORM( 0xbef3723f, 0xbf4f1e8e, 0xbeb0dfbd ),
	VERT( 0xc1094b74, 0xc129b4a4, 0xc0c7803d ),
	NORM( 0xbf126fc6, 0xbf350881, 0xbed4c8de ),
	VERT( 0xc11d1502, 0xc10d1186, 0xc0e440ec ),
	NORM( 0xbf278b9c, 0xbf167cf2, 0xbef37521 ),
	VERT( 0xc12d0062, 0xc0d9ea5b, 0xc0fb62ca ),
	NORM( 0xbf388777, 0xbee878b8, 0xbf061177 ),
	VERT( 0xc138a93c, 0xc0945400, 0xc1062a03 ),
	NORM( 0xbf44f80e, 0xbe9e3cfb, 0xbf0f1b37 ),
	VERT( 0xc13fc60c, 0xc0162d4d, 0xc10b54eb ),
	NORM( 0xbf4c8ece, 0xbe203644, 0xbf149eba ),
	VERT( 0xc1422a04, 0x360637bd, 0xc10d1188 ),
	NORM( 0xbf4f1bbd, 0x00000000, 0xbf167914 ),
	VERT( 0xc13fc60d, 0x40162d62, 0xc10b54ea ),
	NORM( 0xbf4c8ece, 0x3e203687, 0xbf149eba ),
	VERT( 0xc138a93a, 0x4094540b, 0xc1062a02 ),
	NORM( 0xbf44f80e, 0x3e9e3d1d, 0xbf0f1b37 ),
	VERT( 0xc12d005f, 0x40d9ea64, 0xc0fb62c7 ),
	NORM( 0xbf388777, 0x3ee878b8, 0xbf061177 ),
	VERT( 0xc11d14fe, 0x410d118c, 0xc0e440e6 ),
	NORM( 0xbf278b9c, 0x3f167cf2, 0xbef37521 ),
	VERT( 0xc1094b70, 0x4129b4a8, 0xc0c78034 ),
	NORM( 0xbf126fc6, 0x3f350881, 0xbed4c8de ),
	VERT( 0xc0e440e1, 0x41422a06, 0xc0a5d5fa ),
	NORM( 0xbef3721d, 0x3f4f1e8e, 0xbeb0dfbd ),
	VERT( 0xc0b04c10, 0x4155d775, 0xc080165d ),
	NORM( 0xbebc0703, 0x3f641adf, 0xbe889c1b ),
	VERT( 0xc06fffe3, 0x416440ed, 0xc02e5eb3 ),
	NORM( 0xbe7ff6d3, 0x3f737964, 0xbe39f7f9 ),
	VERT( 0xbff2fd97, 0x416d0b94, 0xbfb08b00 ),
	NORM( 0xbe019371, 0x3f7cd962, 0xbdbc48f1 ),
	VERT( 0xc00ed3ae, 0xc16d0b92, 0xbf39a112 ),
	NORM( 0xbe18533b, 0xbf7cd962, 0xbd45f9df ),
	VERT( 0xc08d118a, 0xc16440ea, 0xbfb75808 ),
	NORM( 0xbe9673a3, 0xbf737964, 0xbdc389f8 ),
	VERT( 0xc0cf3fff, 0xc155d771, 0xc006adde ),
	NORM( 0xbedd0a24, 0xbf641adf, 0xbe0fa3fd ),
	VERT( 0xc1062a04, 0xc1422a01, 0xc02e5ec8 ),
	NORM( 0xbf0f1811, 0xbf4f1e8e, 0xbe39fa12 ),
	VERT( 0xc121664f, 0xc129b4a4, 0xc051c487 ),
	NORM( 0xbf2c257d, 0xbf350881, 0xbe5fbc1b ),
	VERT( 0xc138a93a, 0xc10d1186, 0xc0700004 ),
	NORM( 0xbf44f616, 0xbf167cf2, 0xbe7ffc98 ),
	VERT( 0xc14b601f, 0xc0d9ea5b, 0xc0842952 ),
	NORM( 0xbf58ed4e, 0xbee878b8, 0xbe8cf7cb ),
	VERT( 0xc1591506, 0xc0945400, 0xc08d1188 ),
	NORM( 0xbf678cfc, 0xbe9e3cfb, 0xbe96789e ),
	VERT( 0xc1617184, 0xc0162d4d, 0xc0928086 ),
	NORM( 0xbf7078d9, 0xbe203644, 0xbe9c449e ),
	VERT( 0xc16440ed, 0x360637bd, 0xc0945404 ),
	NORM( 0xbf737868, 0x00000000, 0xbe9e377a ),
	VERT( 0xc1617185, 0x40162d62, 0xc0928082 ),
	NORM( 0xbf7078d9, 0x3e203687, 0xbe9c449e ),
	VERT( 0xc1591503, 0x4094540b, 0xc08d1188 ),
	NORM( 0xbf678cfc, 0x3e9e3d1d, 0xbe96787d ),
	VERT( 0xc14b601b, 0x40d9ea64, 0xc0842952 ),
	NORM( 0xbf58ed4e, 0x3ee878b8, 0xbe8cf7cb ),
	VERT( 0xc138a935, 0x410d118c, 0xc06ffffc ),
	NORM( 0xbf44f616, 0x3f167cf2, 0xbe7ffc98 ),
	VERT( 0xc121664a, 0x4129b4a8, 0xc051c47a ),
	NORM( 0xbf2c257d, 0x3f350881, 0xbe5fbc1b ),
	VERT( 0xc10629fd, 0x41422a06, 0xc02e5ec0 ),
	NORM( 0xbf0f1811, 0x3f4f1e8e, 0xbe39f9cf ),
	VERT( 0xc0cf3fec, 0x4155d775, 0xc006add6 ),
	NORM( 0xbedd0a03, 0x3f641adf, 0xbe0fa3fd ),
	VERT( 0xc08d1175, 0x416440ed, 0xbfb757e6 ),
	NORM( 0xbe9673a3, 0x3f737964, 0xbdc389f8 ),
	VERT( 0xc00ed384, 0x416d0b94, 0xbf39a0cf ),
	NORM( 0xbe18533b, 0x3f7cd962, 0xbd45f8d3 ),
	VERT( 0xc0162d56, 0xc16d0b92, 0x00000000 ),
	NORM( 0xbe202a35, 0xbf7cd962, 0x00000000 ),
	VERT( 0xc0945406, 0xc16440ea, 0xb58637bd ),
	NORM( 0xbe9e31d7, 0xbf737964, 0x00000000 ),
	VERT( 0xc0d9ea62, 0xc155d771, 0x00000000 ),
	NORM( 0xbee86a2b, 0xbf641adf, 0x00000000 ),
	VERT( 0xc10d118a, 0xc1422a01, 0x00000000 ),
	NORM( 0xbf167547, 0xbf4f1e8e, 0x00000000 ),
	VERT( 0xc129b4a4, 0xc129b4a4, 0x00000000 ),
	NORM( 0xbf35016d, 0xbf350881, 0x00000000 ),
	VERT( 0xc1422a04, 0xc10d1186, 0x00000000 ),
	NORM( 0xbf4f18ec, 0xbf167cf2, 0x00000000 ),
	VERT( 0xc155d775, 0xc0d9ea5b, 0x00000000 ),
	NORM( 0xbf641722, 0xbee878b8, 0x00000000 ),
	VERT( 0xc16440ef, 0xc0945400, 0x358637bd ),
	NORM( 0xbf73778e, 0xbe9e3cfb, 0x00000000 ),
	VERT( 0xc16d0b96, 0xc0162d4d, 0xb58637bd ),
	NORM( 0xbf7cd8ed, 0xbe203644, 0x00000000 ),
	VERT( 0xc1700004, 0x360637bd, 0x00000000 ),
	NORM( 0xbf800000, 0x00000000, 0x00000000 ),
	VERT( 0xc16d0b96, 0x40162d62, 0x358637bd ),
	NORM( 0xbf7cd8ed, 0x3e203687, 0x00000000 ),
	VERT( 0xc16440ed, 0x4094540b, 0x00000000 ),
	NORM( 0xbf73778e, 0x3e9e3d1d, 0x00000000 ),
	VERT( 0xc155d771, 0x40d9ea64, 0xb58637bd ),
	NORM( 0xbf641722, 0x3ee878b8, 0x00000000 ),
	VERT( 0xc14229fe, 0x410d118c, 0x00000000 ),
	NORM( 0xbf4f18ec, 0x3f167d03, 0x00000000 ),
	VERT( 0xc129b49e, 0x4129b4a8, 0x358637bd ),
	NORM( 0xbf35016d, 0x3f350881, 0x00000000 ),
	VERT( 0xc10d1182, 0x41422a06, 0x00000000 ),
	NORM( 0xbf167536, 0x3f4f1e8e, 0x00000000 ),
	VERT( 0xc0d9ea4d, 0x4155d775, 0x00000000 ),
	NORM( 0xbee86a2b, 0x3f641adf, 0x00000000 ),
	VERT( 0xc09453f2, 0x416440ed, 0x00000000 ),
	NORM( 0xbe9e31b6, 0x3f737964, 0x00000000 ),
	VERT( 0xc0162d2c, 0x416d0b94, 0x00000000 ),
	NORM( 0xbe2029f1, 0x3f7cd962, 0x00000000 ),
	VERT( 0xc00ed3ae, 0xc16d0b92, 0x3f39a112 ),
	NORM( 0xbe18533b, 0xbf7cd962, 0x3d45f9df ),
	VERT( 0xc08d118a, 0xc16440ea, 0x3fb75800 ),
	NORM( 0xbe9673a3, 0xbf737964, 0x3dc389f8 ),
	VERT( 0xc0cf3fff, 0xc155d771, 0x4006ade2 ),
	NORM( 0xbedd0a24, 0xbf641adf, 0x3e0fa3fd ),
	VERT( 0xc1062a04, 0xc1422a01, 0x402e5ecc ),
	NORM( 0xbf0f1811, 0xbf4f1e8e, 0x3e39fa12 ),
	VERT( 0xc121664f, 0xc129b4a4, 0x4051c487 ),
	NORM( 0xbf2c257d, 0xbf350881, 0x3e5fbc1b ),
	VERT( 0xc138a93b, 0xc10d1186, 0x40700004 ),
	NORM( 0xbf44f616, 0xbf167cf2, 0x3e7ffc98 ),
	VERT( 0xc14b601f, 0xc0d9ea5b, 0x40842952 ),
	NORM( 0xbf58ed4e, 0xbee878b8, 0x3e8cf7a9 ),
	VERT( 0xc1591506, 0xc0945400, 0x408d118c ),
	NORM( 0xbf678cfc, 0xbe9e3cfb, 0x3e96787d ),
	VERT( 0xc1617185, 0xc0162d4d, 0x40928082 ),
	NORM( 0xbf7078d9, 0xbe203644, 0x3e9c449e ),
	VERT( 0xc16440ee, 0x360637bd, 0x40945404 ),
	NORM( 0xbf737879, 0x00000000, 0x3e9e377a ),
	VERT( 0xc1617185, 0x40162d62, 0x40928086 ),
	NORM( 0xbf7078d9, 0x3e203687, 0x3e9c449e ),
	VERT( 0xc1591504, 0x4094540b, 0x408d118a ),
	NORM( 0xbf678cfc, 0x3e9e3d1d, 0x3e96787d ),
	VERT( 0xc14b601c, 0x40d9ea64, 0x4084294e ),
	NORM( 0xbf58ed4e, 0x3ee878b8, 0x3e8cf7a9 ),
	VERT( 0xc138a935, 0x410d118c, 0x406ffffc ),
	NORM( 0xbf44f616, 0x3f167cf2, 0x3e7ffc98 ),
	VERT( 0xc121664a, 0x4129b4a8, 0x4051c487 ),
	NORM( 0xbf2c257d, 0x3f350881, 0x3e5fbc1b ),
	VERT( 0xc10629fd, 0x41422a06, 0x402e5ec0 ),
	NORM( 0xbf0f1811, 0x3f4f1e8e, 0x3e39f9cf ),
	VERT( 0xc0cf3fec, 0x4155d775, 0x4006add6 ),
	NORM( 0xbedd0a03, 0x3f641adf, 0x3e0fa3ba ),
	VERT( 0xc08d1177, 0x416440ed, 0x3fb757e6 ),
	NORM( 0xbe9673a3, 0x3f737964, 0x3dc389f8 ),
	VERT( 0xc00ed384, 0x416d0b94, 0x3f39a0cf ),
	NORM( 0xbe18533b, 0x3f7cd962, 0x3d45f8d3 ),
	VERT( 0xbff2fddb, 0xc16d0b92, 0x3fb08b33 ),
	NORM( 0xbe019371, 0xbf7cd962, 0x3dbc48f1 ),
	VERT( 0xc0700008, 0xc16440ea, 0x402e5ec8 ),
	NORM( 0xbe7ff6d3, 0xbf737964, 0x3e39f7f9 ),
	VERT( 0xc0b04c21, 0xc155d771, 0x4080166a ),
	NORM( 0xbebc0703, 0xbf641adf, 0x3e889c1b ),
	VERT( 0xc0e440ee, 0xc1422a01, 0x40a5d604 ),
	NORM( 0xbef3723f, 0xbf4f1e8e, 0x3eb0dfbd ),
	VERT( 0xc1094b74, 0xc129b4a4, 0x40c7803d ),
	NORM( 0xbf126fc6, 0xbf350881, 0x3ed4c8de ),
	VERT( 0xc11d1504, 0xc10d1186, 0x40e440ee ),
	NORM( 0xbf278b9c, 0xbf167cf2, 0x3ef37521 ),
	VERT( 0xc12d0063, 0xc0d9ea5b, 0x40fb62cc ),
	NORM( 0xbf388777, 0xbee87896, 0x3f061177 ),
	VERT( 0xc138a93c, 0xc0945400, 0x41062a06 ),
	NORM( 0xbf44f80e, 0xbe9e3cfb, 0x3f0f1b37 ),
	VERT( 0xc13fc60e, 0xc0162d4d, 0x410b54ea ),
	NORM( 0xbf4c8ece, 0xbe203644, 0x3f149eaa ),
	VERT( 0xc1422a05, 0x360637bd, 0x410d118a ),
	NORM( 0xbf4f1bbd, 0x00000000, 0x3f167914 ),
	VERT( 0xc13fc60d, 0x40162d62, 0x410b54ec ),
	NORM( 0xbf4c8ece, 0x3e203687, 0x3f149eaa ),
	VERT( 0xc138a93b, 0x4094540b, 0x41062a04 ),
	NORM( 0xbf44f80e, 0x3e9e3d1d, 0x3f0f1b37 ),
	VERT( 0xc12d0062, 0x40d9ea64, 0x40fb62c5 ),
	NORM( 0xbf388777, 0x3ee878b8, 0x3f061177 ),
	VERT( 0xc11d14fe, 0x410d118c, 0x40e440e6 ),
	NORM( 0xbf278b9c, 0x3f167d03, 0x3ef37521 ),
	VERT( 0xc1094b6f, 0x4129b4a8, 0x40c78039 ),
	NORM( 0xbf126fc6, 0x3f350881, 0x3ed4c8de ),
	VERT( 0xc0e440e4, 0x41422a06, 0x40a5d5fa ),
	NORM( 0xbef3721d, 0x3f4f1e8e, 0x3eb0dfbd ),
	VERT( 0xc0b04c10, 0x4155d775, 0x4080165d ),
	NORM( 0xbebc0703, 0x3f641adf, 0x3e889c1b ),
	VERT( 0xc06fffe7, 0x416440ed, 0x402e5eb3 ),
	NORM( 0xbe7ff6d3, 0x3f737964, 0x3e39f7f9 ),
	VERT( 0xbff2fd97, 0x416d0b94, 0x3fb08b00 ),
	NORM( 0xbe019371, 0x3f7cd962, 0x3dbc48f1 ),
	VERT( 0xbfb08b33, 0xc16d0b92, 0x3ff2fddb ),
	NORM( 0xbdbc48f1, 0xbf7cd962, 0x3e019371 ),
	VERT( 0xc02e5ecc, 0xc16440ea, 0x40700004 ),
	NORM( 0xbe39f7f9, 0xbf737964, 0x3e7ff6d3 ),
	VERT( 0xc080166a, 0xc155d771, 0x40b04c23 ),
	NORM( 0xbe889c1b, 0xbf641adf, 0x3ebc0703 ),
	VERT( 0xc0a5d602, 0xc1422a01, 0x40e440f0 ),
	NORM( 0xbeb0dfbd, 0xbf4f1e8e, 0x3ef3723f ),
	VERT( 0xc0c7803d, 0xc129b4a4, 0x41094b74 ),
	NORM( 0xbed4c8de, 0xbf350881, 0x3f126fc6 ),
	VERT( 0xc0e440ee, 0xc10d1186, 0x411d1504 ),
	NORM( 0xbef37521, 0xbf167cf2, 0x3f278b9c ),
	VERT( 0xc0fb62cc, 0xc0d9ea5b, 0x412d0063 ),
	NORM( 0xbf061177, 0xbee87896, 0x3f388777 ),
	VERT( 0xc1062a04, 0xc0945400, 0x4138a93e ),
	NORM( 0xbf0f1b37, 0xbe9e3cfb, 0x3f44f80e ),
	VERT( 0xc10b54ec, 0xc0162d4d, 0x413fc60d ),
	NORM( 0xbf149eba, 0xbe203644, 0x3f4c8ece ),
	VERT( 0xc10d118a, 0x360637bd, 0x41422a05 ),
	NORM( 0xbf167914, 0x00000000, 0x3f4f1bbd ),
	VERT( 0xc10b54ea, 0x40162d62, 0x413fc60e ),
	NORM( 0xbf149eaa, 0x3e203687, 0x3f4c8ece ),
	VERT( 0xc1062a03, 0x4094540b, 0x4138a93c ),
	NORM( 0xbf0f1b37, 0x3e9e3d1d, 0x3f44f80e ),
	VERT( 0xc0fb62ca, 0x40d9ea64, 0x412d0060 ),
	NORM( 0xbf061177, 0x3ee878b8, 0x3f388766 ),
	VERT( 0xc0e440e6, 0x410d118c, 0x411d14fe ),
	NORM( 0xbef37521, 0x3f167d03, 0x3f278b9c ),
	VERT( 0xc0c78034, 0x4129b4a8, 0x41094b70 ),
	NORM( 0xbed4c8de, 0x3f350881, 0x3f126fc6 ),
	VERT( 0xc0a5d5fc, 0x41422a06, 0x40e440e4 ),
	NORM( 0xbeb0dfbd, 0x3f4f1e8e, 0x3ef3721d ),
	VERT( 0xc080165d, 0x4155d775, 0x40b04c12 ),
	NORM( 0xbe889c1b, 0x3f641adf, 0x3ebc0703 ),
	VERT( 0xc02e5eb3, 0x416440ed, 0x406fffe7 ),
	NORM( 0xbe39f7f9, 0x3f737964, 0x3e7ff6d3 ),
	VERT( 0xbfb08b00, 0x416d0b94, 0x3ff2fd97 ),
	NORM( 0xbdbc48f1, 0x3f7cd962, 0x3e019371 ),
	VERT( 0xbf39a112, 0xc16d0b92, 0x400ed3ae ),
	NORM( 0xbd45f9df, 0xbf7cd962, 0x3e18533b ),
	VERT( 0xbfb75808, 0xc16440ea, 0x408d118a ),
	NORM( 0xbdc389f8, 0xbf737964, 0x3e9673a3 ),
	VERT( 0xc006adde, 0xc155d771, 0x40cf4001 ),
	NORM( 0xbe0fa3fd, 0xbf641adf, 0x3edd0a24 ),
	VERT( 0xc02e5ec8, 0xc1422a01, 0x41062a05 ),
	NORM( 0xbe39fa12, 0xbf4f1e7e, 0x3f0f1811 ),
	VERT( 0xc051c487, 0xc129b4a4, 0x4121664f ),
	NORM( 0xbe5fbc1b, 0xbf350881, 0x3f2c257d ),
	VERT( 0xc0700004, 0xc10d1186, 0x4138a93c ),
	NORM( 0xbe7ffc98, 0xbf167cf2, 0x3f44f616 ),
	VERT( 0xc0842952, 0xc0d9ea5b, 0x414b6020 ),
	NORM( 0xbe8cf7cb, 0xbee878b8, 0x3f58ed4e ),
	VERT( 0xc08d1188, 0xc0945400, 0x41591508 ),
	NORM( 0xbe96789e, 0xbe9e3cfb, 0x3f678cfc ),
	VERT( 0xc0928086, 0xc0162d4d, 0x41617186 ),
	NORM( 0xbe9c449e, 0xbe203644, 0x3f7078d9 ),
	VERT( 0xc0945406, 0x360637bd, 0x416440ee ),
	NORM( 0xbe9e377a, 0x00000000, 0x3f737868 ),
	VERT( 0xc0928082, 0x40162d62, 0x41617186 ),
	NORM( 0xbe9c449e, 0x3e203644, 0x3f7078d9 ),
	VERT( 0xc08d1188, 0x4094540b, 0x41591506 ),
	NORM( 0xbe96787d, 0x3e9e3d1d, 0x3f678cfc ),
	VERT( 0xc0842952, 0x40d9ea64, 0x414b601d ),
	NORM( 0xbe8cf7a9, 0x3ee878b8, 0x3f58ed3e ),
	VERT( 0xc06ffffc, 0x410d118c, 0x4138a935 ),
	NORM( 0xbe7ffc98, 0x3f167d03, 0x3f44f616 ),
	VERT( 0xc051c47a, 0x4129b4a8, 0x4121664a ),
	NORM( 0xbe5fbc1b, 0x3f350881, 0x3f2c257d ),
	VERT( 0xc02e5ec4, 0x41422a06, 0x410629fe ),
	NORM( 0xbe39f9cf, 0x3f4f1e8e, 0x3f0f1811 ),
	VERT( 0xc006add6, 0x4155d775, 0x40cf3fee ),
	NORM( 0xbe0fa3ba, 0x3f641adf, 0x3edd0a03 ),
	VERT( 0xbfb757e6, 0x416440ed, 0x408d1177 ),
	NORM( 0xbdc389f8, 0x3f737964, 0x3e9673a3 ),
	VERT( 0xbf39a0cf, 0x416d0b94, 0x400ed384 ),
	NORM( 0xbd45f8d3, 0x3f7cd962, 0x3e18533b ),
	VERT( 0x00000000, 0xc16d0b92, 0x40162d56 ),
	NORM( 0x00000000, 0xbf7cd962, 0x3e202a35 ),
	VERT( 0x00000000, 0xc16440ea, 0x40945406 ),
	NORM( 0x00000000, 0xbf737964, 0x3e9e31d7 ),
	VERT( 0x00000000, 0xc155d771, 0x40d9ea62 ),
	NORM( 0x00000000, 0xbf641adf, 0x3ee86a2b ),
	VERT( 0x358637bd, 0xc1422a01, 0x410d118b ),
	NORM( 0x00000000, 0xbf4f1e8e, 0x3f167547 ),
	VERT( 0x00000000, 0xc129b4a4, 0x4129b4a4 ),
	NORM( 0x00000000, 0xbf350881, 0x3f35016d ),
	VERT( 0x00000000, 0xc10d1186, 0x41422a06 ),
	NORM( 0x00000000, 0xbf167cf2, 0x3f4f18ec ),
	VERT( 0x00000000, 0xc0d9ea5b, 0x4155d776 ),
	NORM( 0x00000000, 0xbee878b8, 0x3f641722 ),
	VERT( 0x358637bd, 0xc0945400, 0x416440f1 ),
	NORM( 0x00000000, 0xbe9e3cfb, 0x3f73778e ),
	VERT( 0x00000000, 0xc0162d4d, 0x416d0b99 ),
	NORM( 0x00000000, 0xbe203644, 0x3f7cd8ed ),
	VERT( 0x00000000, 0x360637bd, 0x41700005 ),
	NORM( 0x00000000, 0x00000000, 0x3f800000 ),
	VERT( 0x360637bd, 0x40162d62, 0x416d0b97 ),
	NORM( 0x00000000, 0x3e203644, 0x3f7cd8ed ),
	VERT( 0x358637bd, 0x4094540b, 0x416440ef ),
	NORM( 0x00000000, 0x3e9e3d1d, 0x3f73778e ),
	VERT( 0xb58637bd, 0x40d9ea64, 0x4155d773 ),
	NORM( 0x00000000, 0x3ee878b8, 0x3f641722 ),
	VERT( 0x00000000, 0x410d118c, 0x414229fe ),
	NORM( 0x00000000, 0x3f167d03, 0x3f4f18ec ),
	VERT( 0x358637bd, 0x4129b4a8, 0x4129b49e ),
	NORM( 0x00000000, 0x3f350881, 0x3f35016d ),
	VERT( 0x00000000, 0x41422a06, 0x410d1184 ),
	NORM( 0x00000000, 0x3f4f1e8e, 0x3f167536 ),
	VERT( 0x00000000, 0x4155d775, 0x40d9ea4f ),
	NORM( 0x00000000, 0x3f641adf, 0x3ee86a0a ),
	VERT( 0x00000000, 0x416440ed, 0x409453f2 ),
	NORM( 0x00000000, 0x3f737964, 0x3e9e31b6 ),
	VERT( 0x00000000, 0x416d0b94, 0x40162d2c ),
	NORM( 0x00000000, 0x3f7cd962, 0x3e2029f1 ),
	VERT( 0x3f39a112, 0xc16d0b92, 0x400ed3ae ),
	NORM( 0x3d45f9df, 0xbf7cd962, 0x3e18533b ),
	VERT( 0x3fb75800, 0xc16440ea, 0x408d118c ),
	NORM( 0x3dc389f8, 0xbf737964, 0x3e9673a3 ),
	VERT( 0x4006ade2, 0xc155d771, 0x40cf4001 ),
	NORM( 0x3e0fa3fd, 0xbf641adf, 0x3edd0a24 ),
	VERT( 0x402e5ed0, 0xc1422a01, 0x41062a05 ),
	NORM( 0x3e39fa12, 0xbf4f1e7e, 0x3f0f1811 ),
	VERT( 0x4051c487, 0xc129b4a4, 0x4121664f ),
	NORM( 0x3e5fbc1b, 0xbf350881, 0x3f2c257d ),
	VERT( 0x40700004, 0xc10d1186, 0x4138a93d ),
	NORM( 0x3e7ffc98, 0xbf167cf2, 0x3f44f616 ),
	VERT( 0x40842952, 0xc0d9ea5b, 0x414b6020 ),
	NORM( 0x3e8cf7a9, 0xbee878b8, 0x3f58ed4e ),
	VERT( 0x408d118e, 0xc0945400, 0x41591508 ),
	NORM( 0x3e96787d, 0xbe9e3cfb, 0x3f678cfc ),
	VERT( 0x40928084, 0xc0162d4d, 0x41617187 ),
	NORM( 0x3e9c449e, 0xbe203644, 0x3f7078d9 ),
	VERT( 0x40945404, 0x360637bd, 0x416440ef ),
	NORM( 0x3e9e377a, 0x00000000, 0x3f737879 ),
	VERT( 0x4092808a, 0x40162d62, 0x41617185 ),
	NORM( 0x3e9c449e, 0x3e203644, 0x3f7078d9 ),
	VERT( 0x408d118c, 0x4094540b, 0x41591506 ),
	NORM( 0x3e96787d, 0x3e9e3d1d, 0x3f678cfc ),
	VERT( 0x4084294e, 0x40d9ea64, 0x414b601e ),
	NORM( 0x3e8cf7a9, 0x3ee878b8, 0x3f58ed3e ),
	VERT( 0x406ffffc, 0x410d118c, 0x4138a935 ),
	NORM( 0x3e7ffc98, 0x3f167d03, 0x3f44f616 ),
	VERT( 0x4051c487, 0x4129b4a8, 0x4121664a ),
	NORM( 0x3e5fbc1b, 0x3f350881, 0x3f2c257d ),
	VERT( 0x402e5ec4, 0x41422a06, 0x410629ff ),
	NORM( 0x3e39f9cf, 0x3f4f1e8e, 0x3f0f1811 ),
	VERT( 0x4006adda, 0x4155d775, 0x40cf3fee ),
	NORM( 0x3e0fa3ba, 0x3f641adf, 0x3edd0a03 ),
	VERT( 0x3fb757e6, 0x416440ed, 0x408d1177 ),
	NORM( 0x3dc389f8, 0x3f737964, 0x3e9673a3 ),
	VERT( 0x3f39a0cf, 0x416d0b94, 0x400ed384 ),
	NORM( 0x3d45f8d3, 0x3f7cd962, 0x3e18533b ),
	VERT( 0x3fb08b33, 0xc16d0b92, 0x3ff2fddb ),
	NORM( 0x3dbc48f1, 0xbf7cd962, 0x3e019371 ),
	VERT( 0x402e5ec8, 0xc16440ea, 0x40700008 ),
	NORM( 0x3e39f7f9, 0xbf737964, 0x3e7ff6d3 ),
	VERT( 0x4080166a, 0xc155d771, 0x40b04c23 ),
	NORM( 0x3e889c1b, 0xbf641adf, 0x3ebc0703 ),
	VERT( 0x40a5d606, 0xc1422a01, 0x40e440f0 ),
	NORM( 0x3eb0dfbd, 0xbf4f1e7e, 0x3ef3723f ),
	VERT( 0x40c7803d, 0xc129b4a4, 0x41094b74 ),
	NORM( 0x3ed4c8de, 0xbf350881, 0x3f126fc6 ),
	VERT( 0x40e440f0, 0xc10d1186, 0x411d1505 ),
	NORM( 0x3ef37521, 0xbf167cf2, 0x3f278b9c ),
	VERT( 0x40fb62ce, 0xc0d9ea5b, 0x412d0064 ),
	NORM( 0x3f061177, 0xbee878b8, 0x3f388777 ),
	VERT( 0x41062a07, 0xc0945400, 0x4138a93e ),
	NORM( 0x3f0f1b37, 0xbe9e3cfb, 0x3f44f80e ),
	VERT( 0x410b54ec, 0xc0162d4d, 0x413fc610 ),
	NORM( 0x3f149eba, 0xbe203644, 0x3f4c8ece ),
	VERT( 0x410d118a, 0x360637bd, 0x41422a06 ),
	NORM( 0x3f167914, 0x00000000, 0x3f4f1bbd ),
	VERT( 0x410b54ee, 0x40162d62, 0x413fc60d ),
	NORM( 0x3f149eaa, 0x3e203644, 0x3f4c8ece ),
	VERT( 0x41062a06, 0x4094540b, 0x4138a93c ),
	NORM( 0x3f0f1b37, 0x3e9e3d1d, 0x3f44f80e ),
	VERT( 0x40fb62c7, 0x40d9ea64, 0x412d0062 ),
	NORM( 0x3f061177, 0x3ee878b8, 0x3f388766 ),
	VERT( 0x40e440e6, 0x410d118c, 0x411d14fe ),
	NORM( 0x3ef37521, 0x3f167d03, 0x3f278b9c ),
	VERT( 0x40c78039, 0x4129b4a8, 0x41094b6f ),
	NORM( 0x3ed4c8de, 0x3f350881, 0x3f126fc6 ),
	VERT( 0x40a5d5fc, 0x41422a06, 0x40e440e8 ),
	NORM( 0x3eb0dfbd, 0x3f4f1e8e, 0x3ef3723f ),
	VERT( 0x4080165f, 0x4155d775, 0x40b04c12 ),
	NORM( 0x3e889c1b, 0x3f641adf, 0x3ebc0703 ),
	VERT( 0x402e5eb3, 0x416440ed, 0x406fffe7 ),
	NORM( 0x3e39f7f9, 0x3f737964, 0x3e7ff6d3 ),
	VERT( 0x3fb08b00, 0x416d0b94, 0x3ff2fd97 ),
	NORM( 0x3dbc48f1, 0x3f7cd962, 0x3e019371 ),
	VERT( 0x3ff2fddb, 0xc16d0b92, 0x3fb08b33 ),
	NORM( 0x3e019371, 0xbf7cd962, 0x3dbc48f1 ),
	VERT( 0x40700008, 0xc16440ea, 0x402e5ecc ),
	NORM( 0x3e7ff6d3, 0xbf737964, 0x3e39f7f9 ),
	VERT( 0x40b04c23, 0xc155d771, 0x4080166a ),
	NORM( 0x3ebc0703, 0xbf641adf, 0x3e889c1b ),
	VERT( 0x40e440f2, 0xc1422a01, 0x40a5d602 ),
	NORM( 0x3ef3723f, 0xbf4f1e8e, 0x3eb0dfbd ),
	VERT( 0x41094b74, 0xc129b4a4, 0x40c7803d ),
	NORM( 0x3f126fc6, 0xbf350881, 0x3ed4c8de ),
	VERT( 0x411d1505, 0xc10d1186, 0x40e440f0 ),
	NORM( 0x3f278b9c, 0xbf167cf2, 0x3ef37521 ),
	VERT( 0x412d0064, 0xc0d9ea5b, 0x40fb62cc ),
	NORM( 0x3f388777, 0xbee878b8, 0x3f061177 ),
	VERT( 0x4138a940, 0xc0945400, 0x41062a05 ),
	NORM( 0x3f44f80e, 0xbe9e3cfb, 0x3f0f1b37 ),
	VERT( 0x413fc610, 0xc0162d4d, 0x410b54ed ),
	NORM( 0x3f4c8ece, 0xbe203644, 0x3f149eba ),
	VERT( 0x41422a06, 0x360637bd, 0x410d118a ),
	NORM( 0x3f4f1bbd, 0x00000000, 0x3f167914 ),
	VERT( 0x413fc610, 0x40162d62, 0x410b54ea ),
	NORM( 0x3f4c8ece, 0x3e203644, 0x3f149eaa ),
	VERT( 0x4138a93e, 0x4094540b, 0x41062a04 ),
	NORM( 0x3f44f80e, 0x3e9e3d1d, 0x3f0f1b37 ),
	VERT( 0x412d0062, 0x40d9ea64, 0x40fb62cc ),
	NORM( 0x3f388766, 0x3ee878d9, 0x3f061177 ),
	VERT( 0x411d14fe, 0x410d118c, 0x40e440e6 ),
	NORM( 0x3f278b8b, 0x3f167d03, 0x3ef37521 ),
	VERT( 0x41094b70, 0x4129b4a8, 0x40c78034 ),
	NORM( 0x3f126fc6, 0x3f350881, 0x3ed4c8de ),
	VERT( 0x40e440e6, 0x41422a06, 0x40a5d5fe ),
	NORM( 0x3ef3723f, 0x3f4f1e8e, 0x3eb0dfbd ),
	VERT( 0x40b04c14, 0x4155d775, 0x4080165d ),
	NORM( 0x3ebc0703, 0x3f641adf, 0x3e889c1b ),
	VERT( 0x406fffe7, 0x416440ed, 0x402e5eb3 ),
	NORM( 0x3e7ff6d3, 0x3f737964, 0x3e39f7f9 ),
	VERT( 0x3ff2fd97, 0x416d0b94, 0x3fb08b00 ),
	NORM( 0x3e019371, 0x3f7cd962, 0x3dbc48f1 ),
	VERT( 0x400ed3ae, 0xc16d0b92, 0x3f39a112 ),
	NORM( 0x3e18533b, 0xbf7cd962, 0x3d45f9df ),
	VERT( 0x408d118c, 0xc16440ea, 0x3fb75808 ),
	NORM( 0x3e9673a3, 0xbf737964, 0x3dc389f8 ),
	VERT( 0x40cf4001, 0xc155d771, 0x4006ade2 ),
	NORM( 0x3edd0a24, 0xbf641adf, 0x3e0fa3ba ),
	VERT( 0x41062a06, 0xc1422a01, 0x402e5ec8 ),
	NORM( 0x3f0f1811, 0xbf4f1e8e, 0x3e39f9cf ),
	VERT( 0x4121664f, 0xc129b4a4, 0x4051c487 ),
	NORM( 0x3f2c257d, 0xbf350881, 0x3e5fbc1b ),
	VERT( 0x4138a93e, 0xc10d1186, 0x40700008 ),
	NORM( 0x3f44f616, 0xbf167cf2, 0x3e7ffc54 ),
	VERT( 0x414b6020, 0xc0d9ea5b, 0x40842952 ),
	NORM( 0x3f58ed4e, 0xbee878b8, 0x3e8cf7a9 ),
	VERT( 0x41591509, 0xc0945400, 0x408d118a ),
	NORM( 0x3f678d0d, 0xbe9e3cfb, 0x3e96787d ),
	VERT( 0x41617189, 0xc0162d4d, 0x40928086 ),
	NORM( 0x3f7078d9, 0xbe203644, 0x3e9c449e ),
	VERT( 0x416440f0, 0x360637bd, 0x40945404 ),
	NORM( 0x3f737879, 0x00000000, 0x3e9e3758 ),
	VERT( 0x41617188, 0x40162d62, 0x40928082 ),
	NORM( 0x3f7078d9, 0x3e203644, 0x3e9c449e ),
	VERT( 0x41591508, 0x4094540b, 0x408d1188 ),
	NORM( 0x3f678d0d, 0x3e9e3d1d, 0x3e96787d ),
	VERT( 0x414b601f, 0x40d9ea64, 0x40842952 ),
	NORM( 0x3f58ed4e, 0x3ee878b8, 0x3e8cf7a9 ),
	VERT( 0x4138a935, 0x410d118c, 0x406ffffc ),
	NORM( 0x3f44f616, 0x3f167d03, 0x3e7ffc54 ),
	VERT( 0x4121664a, 0x4129b4a8, 0x4051c47a ),
	NORM( 0x3f2c257d, 0x3f350881, 0x3e5fbc1b ),
	VERT( 0x410629ff, 0x41422a06, 0x402e5ec4 ),
	NORM( 0x3f0f1811, 0x3f4f1e8e, 0x3e39f9cf ),
	VERT( 0x40cf3ff0, 0x4155d775, 0x4006add6 ),
	NORM( 0x3edd0a03, 0x3f641adf, 0x3e0fa3ba ),
	VERT( 0x408d1179, 0x416440ed, 0x3fb757e6 ),
	NORM( 0x3e9673a3, 0x3f737964, 0x3dc389f8 ),
	VERT( 0x400ed384, 0x416d0b94, 0x3f39a0cf ),
	NORM( 0x3e18533b, 0x3f7cd962, 0x3d45f8d3 ),
	CnkEnd()
END

CNKMODEL   model__sphere3_sphere3[]
START
VList      vertex__sphere3_sphere3,
PList      strip__sphere3_sphere3,
Center      -0.000002F,  0.000000F,  0.000001F,
Radius      21.213207F,
END

CNKOBJECT  object__sphere3_sphere3[]
START
EvalFlags ( 0x00000017 ),
CNKModel   model__sphere3_sphere3,
OPosition  (  0.000000F,  0.000000F,  0.000000F ),
OAngle     (  0.000000F,  0.000000F,  0.000000F ),
OScale     (  1.000000F,  1.000000F,  1.000000F ),
Child       NULL,
Sibling     NULL,
END

CNKOBJECT_END


DEFAULT_START

#ifndef DEFAULT_OBJECT_NAME
#define DEFAULT_OBJECT_NAME object__sphere3_sphere3
#endif

DEFAULT_END


{
  "name": "ninja-lib",
  "version": "0.0.56",
  "description": "library for converting various 3d and texture file formats along with required decompression methods",
  "main": "ninja-lib.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Kion"
  },
  "contributors": [
    {
      "name": "Tofuman"
    }
  ],
  "license": {
    "type": "MIT",
    "url": "http://www.opensource.org/licenses/mit-license.php"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/seiche/Ninja-Lib.git"
  },
  "readme": "\r\nNinja-lib is now on npm. You can now convert files easily using Nodejs. This\r\nlibrary has been made mostly with BlueBurst in mind and have no intention of\r\nsupporting other versions, but this is an open source library, so if you need\r\nyou change anything you can always fork the github repository.\r\n\r\n**Installation**\r\n\r\nInstall ninja-lib with npm\r\n```\r\nnpm install ninja-lib\r\n```\r\n\r\nUse it in your code\r\n```\r\nvar ninja = require(\"ninja-lib\");\r\n```\r\n\r\n**get_extension(buffer)**\r\n\r\nThis function takes a buffer as an agrument, looks at the first four bytes and\r\nreturns an extension for the file based on the Interchange File Format given by\r\nthe first four bytes of the file. Returns \".bin\" if file extension is not\r\nrecognized.\r\n```\r\nvar buffer = fs.readFileSync(\"unkown_file.bin\");\r\nvar ext = ninja.get_extension(buffer);\r\n//returns \".xvm\", \".nj\", etc\r\n```\r\n\r\n**extract_bml(filename, [dest_folder])**\r\n\r\nThis function takes a filename and an destination folder as an optional argument.\r\nThe provided bml file is parsed and extracted to the destination folder. If no\r\ndestination folder is provided, the files are written to the same directory as\r\nthe source filename. This function will throw an error if the source file or\r\ndestinatation folder provided do not exist.\r\n\r\nReturns a list of all of the extracted files from the bml archive.\r\n```\r\nvar bml_file = \"booma_bagons.bml\";\r\nvar arr = ninja.extract_bml(bml_file, \"out/\");\r\n//returns [\"out/booma.nj\", \"out/booma.pvm\", ...]\r\n```\r\n\r\n**extract_afs(filename, [compressed], [dest_folder])**\r\n\r\nThis function takes a filename, compressed boolean and destination folder as\r\narguments. Compressed is a boolean value stating if the files inside the afs\r\nfile are compressed with prs. Dest folder follows the same rules as extract_bml,\r\nif no folder is provided, files are extracted to the same directory as the source\r\nfolder.\r\n\r\nReturns a list of all of the extracted files from the afs archive.\r\n```\r\nvar afs_file = \"WeaponList.afs\";\r\nvar arr = ninja.extract_afs(afs_file, true, \"out/\");\r\n//returns [\"out/WeaponList_000.xvm\", \"out/WeaponList_001.xvm\" ...]\r\n```\r\n\r\n**extract_gsl(filename, [dest_folder])**\r\n\r\nThis function takes a filename and a destination folder as arguments. Dest folder\r\nfollows the same rules as extract_bml, if no folder is provided, files are\r\nextracted to the same directory as the source folder.\r\n\r\nReturns a list of all of the extracted files from the gsl archive.\r\n```\r\nvar gsl_file = \"data.gsl\";\r\nvar arr = ninja.extract_gsl(gsl_file, \"out/\");\r\n//returns [\"out/lightentry.bin\", \"out/map_ancient_e.bin\" ...]\r\n```\r\n\r\n**decompress_prs(buffer)**\r\n\r\nThis function takes a buffer as an argument and returns a decompressed buffer\r\nas a result.\r\n```\r\nvar prs_buffer = fs.readFileSync(\"some_file.prs\");\r\nvar decomp_buffer = ninja.decompress_prs(prs_buffer);\r\nvar ext = ninja.get_extension(decomp_buffer);\r\nfs.writeFileSync(\"some_file\" + ext, decomp_buffer);\r\n```\r\n",
  "readmeFilename": "readme.md",
  "gitHead": "8d37402ac8c7d3e19a3c25e84fc350c72bd1592f",
  "bugs": {
    "url": "https://github.com/seiche/Ninja-Lib/issues"
  },
  "homepage": "https://github.com/seiche/Ninja-Lib#readme",
  "_id": "ninja-lib@0.0.56",
  "_shasum": "3db11c57778cf891d5b8c213b2d6d4595ad3da1b",
  "_from": "ninja-lib@*"
}
